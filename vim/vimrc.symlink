" vim: set sw=4 ts=4 sts=4 et tw=78 foldlevel=0 foldmethod=marker spell:

set t_Co=256
syntax on

" Unfortunately I couldn't get smartcase to work with verymagic but ic works
set ic
" set scs

imap jk <esc>
set fen
"au BufWinLeave ?* mkview
"au BufWinEnter ?* silent loadview

if has('vim_starting')
    set nocompatible " Be iMproved
endif

" Required:
set runtimepath^=$HOME/dein/repos/github.com/Shougo/dein.vim

" Required:
call dein#begin(expand($HOME . '/dein'))

" Let dein manage dein
" Required:
call dein#add('Shougo/dein.vim')

" Add or remove your plugins here:
call dein#add('Shougo/neosnippet.vim')
call dein#add('Shougo/neosnippet-snippets')

" Persistent Very Magic
call dein#add('coot/CRDispatcher')
call dein#add('coot/EnchantedVim')

call dein#add('airblade/vim-rooter')
call dein#add('scrooloose/nerdtree')
call dein#add('goldfeld/vim-seek')
call dein#add('plasticboy/vim-markdown')
call dein#add('godlygeek/tabular')
call dein#add('vim-airline/vim-airline')
call dein#add('vim-airline/vim-airline-themes')
call dein#add('gotgenes/vim-yapif')

call dein#add('mileszs/ack.vim')
call dein#add('tacahiroy/ctrlp-funky')
call dein#add('kien/rainbow_parentheses.vim')
call dein#add('altercation/vim-colors-solarized')
call dein#add('tpope/vim-fugitive')
call dein#add('tpope/vim-sleuth')
call dein#add('tpope/vim-repeat')
call dein#add('tpope/vim-abolish')
call dein#add('nathanaelkane/vim-indent-guides')

call dein#add('Shougo/neocomplcache.git')

call dein#add('mattn/emmet-vim')
let g:user_emmet_expandabbr_key = '<c-e>'
let g:use_emmet_complete_tag = 1

" Make very magic the default
call dein#add('coot/EnchantedVim')
call dein#add('coot/CRDispatcher')

call dein#add('tpope/vim-surround')
call dein#add('kien/ctrlp.vim')
call dein#add('xolox/vim-easytags')
call dein#add('xolox/vim-misc')

call dein#add('AndrewRadev/linediff.vim')
call dein#add('mbbill/undotree')

" call dein#add('spf13/vim-autoclose')
" call dein#add('python-rope/ropevim')
call dein#add('Lokaltog/vim-easymotion')

call dein#add('tpope/vim-eunuch')

call dein#add('tpope/vim-unimpaired')
call dein#add('tpope/vim-commentary')
call dein#add('terryma/vim-multiple-cursors')
call dein#add('jmcantrell/vim-diffchanges')
call dein#add('vim-scripts/YankRing.vim')
call dein#add('gregsexton/gitv')
call dein#add('wellle/targets.vim')

call dein#add('scrooloose/syntastic')
call dein#add('wookiehangover/jshint.vim')

call dein#add('vim-scripts/Align')
call dein#add('jphustman/SQLUtilities')
call dein#add('dhruvasagar/vim-table-mode')

" Required:
call dein#end()

" Required:
filetype plugin indent on

" If you want to install not installed plugins on startup.
if dein#check_install()
    call dein#install()
endif

"End dein Scripts-------------------------

let g:indent_guides_start_level = 2
let g:indent_guides_guide_size = 1
let g:indent_guides_auto_colors = 0
au FileType python IndentGuidesEnable
" indent-guides.vim
autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd guibg=gray ctermbg=0
autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=green ctermbg=0

" NEOCOMPLCACHE SETTINGS {{{
let g:neocomplcache_enable_at_startup = 1
imap neosnippet#expandable() ? "(neosnippet_expand_or_jump)" : pumvisible() ?  "" : ""
smap neosnippet#expandable() ? "(neosnippet_expand_or_jump)" :
let g:neocomplcache_force_overwrite_completefunc = 1
if !exists('g:neocomplcache_omni_functions')
   let g:neocomplcache_omni_functions = {}
endif
if !exists('g:neocomplcache_force_omni_patterns')
   let g:neocomplcache_force_omni_patterns = {}
endif
let g:neocomplcache_force_overwrite_completefunc = 1
let g:neocomplcache_force_omni_patterns['python'] = '[^. t].w*'
set ofu=syntaxcomplete#Complete
"au FileType python set omnifunc=pythoncomplete#Complete textwidth=0
autocmd FileType python setlocal omnifunc=RopeCompleteFunc
au FileType python let b:did_ftplugin = 1
" }}}

" Vim-jedi settings
let g:jedi#popup_on_dot = 0

" This lets you still see space in showcmd from http://superuser.com/a/693644/312157
"map <Space> <Leader>
let mapleader="\<SPACE>"
set showcmd
" For conflict
let loaded_alternateFile = 1
let DidEnhancedCommentify = 1

" Rainbow Parens
let g:rbpt_colorpairs = [
   \ [ '13', '#6c71c4'],
   \ [ '5',  '#d33682'],
   \ [ '1',  '#dc322f'],
   \ [ '9',  '#cb4b16'],
   \ [ '3',  '#b58900'],
   \ [ '2',  '#859900'],
   \ [ '6',  '#2aa198'],
   \ [ '4',  '#268bd2'],
   \ ]

au VimEnter * RainbowParenthesesToggle
au Syntax * RainbowParenthesesLoadRound
au Syntax * RainbowParenthesesLoadSquare
au Syntax * RainbowParenthesesLoadBraces

nmap <leader>nt :NERDTreeToggle<cr>

" CtrlP
nnoremap <leader>f :CtrlP<CR>
nnoremap <leader>b :CtrlPBuffer<CR>
" Make alignmaps not load because of conflicting keymap
let g:loaded_alignmaps = "v3d"
nnoremap <leader>m :CtrlPMRUFiles<CR>
nnoremap <leader>d :CtrlPBufTag<CR>

" Unite {{{
"let g:unite_source_history_yank_enable = 1
"nnoremap <Leader>/ :<C-u>Unite -no-split -silent -buffer-name=ag grep:.<CR>
"nnoremap <leader>s :<C-u>Unite -no-split -quick-match buffer<cr>
"nnoremap <leader>y :<C-u>Unite -no-split -buffer-name=yank    history/yank<cr>
"" nnoremap <leader>f :<C-u>Unite -no-split -buffer-name=files -start-insert file_rec/async:!<cr>
"nnoremap <leader>r :<C-u>Unite -no-split -buffer-name=mru -start-insert file_mru<cr>
"nnoremap <leader>o :<C-u>Unite -no-split -buffer-name=outline -start-insert outline<cr>

"if executable('ag')
    "" Use ag in unite grep source.
    "let g:unite_source_grep_command = 'ag'
    "let g:unite_source_grep_default_opts =
                "\ '-i --line-numbers --nocolor --nogroup --hidden --ignore ' .
                "\  '''.hg'' --ignore ''.svn'' --ignore ''.git'' --ignore ''.bzr'''
    "let g:unite_source_grep_recursive_opt = ''
"elseif executable('pt')
    "" Use pt in unite grep source.
    "" https://github.com/monochromegane/the_platinum_searcher
    "let g:unite_source_grep_command = 'pt'
    "let g:unite_source_grep_default_opts = '-i --nogroup --nocolor'
    "let g:unite_source_grep_recursive_opt = ''
"elseif executable('ack-grep')
    "" Use ack in unite grep source.
    "let g:unite_source_grep_command = 'ack-grep'
    "let g:unite_source_grep_default_opts =
                "\ '-i --no-heading --no-color -k -H'
    "let g:unite_source_grep_recursive_opt = ''
"endif

"" Custom mappings for the unite buffer
"autocmd FileType unite call s:unite_settings()
"function! s:unite_settings()
    "" Play nice with supertab
    "" let b:SuperTabDisabled=1
    "" Enable navigation with control-j and control-k in insert mode
    "imap <buffer> <C-j>   <Plug>(unite_select_next_line)
    "imap <buffer> <C-k>   <Plug>(unite_select_previous_line)
    "imap <silent><buffer><expr> <C-x> unite#do_action('split')
    "imap <silent><buffer><expr> <C-v> unite#do_action('vsplit')
    "imap <silent><buffer><expr> <C-t> unite#do_action('tabopen')

    "nmap <buffer> <ESC> <Plug>(unite_exit)
"endfunction
" }}}

colorscheme solarized
set bg=dark
hi Normal ctermbg=NONE

" Setup the status line to display the tagname, if the taglist plugin has been loaded
autocmd VimEnter * try
autocmd VimEnter *   call Tlist_Get_Tagname_By_Line()
autocmd VimEnter *   set statusline=%f\ %y%{GetStatusEx()}[b:%n]\ [t:%{Tlist_Get_Tagname_By_Line()}]\ %m%r%=(%l/%L,%c%V)\ %P
autocmd VimEnter *   map <silent> <Leader>tap :TlistAddFilesRecursive . *pm<CR>
autocmd VimEnter * catch
autocmd VimEnter * endt

" Function for getting the file format and the encoding for the status line.
function! GetStatusEx()
    let str = ' [' . &fileformat
    if has('multi_byte') && &fileencoding != ''
        let str = str . ':' . &fileencoding
    endif
    let str = str . '] '
    return str
endfunction

set timeout

noremap <leader>q :q<CR>
noremap <leader>w :w<CR>

" Get rid of conflict
map <Plug>IMAP_NOJumpForward <Plug>IMAP_JumpForward

noremap <C-h> <C-w>h
noremap <C-j> <C-w>j
noremap <C-k> <C-w>k
noremap <C-l> <C-w>l

" CtrlP
let g:ctrlp_working_path_mode = 'ra'

noremap <leader>ev :e ~/.vimrc<CR>

" linediff
noremap \ldt :Linediff<CR>
noremap \ldo :LinediffReset<CR>

set number " enable line numbers

set sw=4 ts=4 si ai

" Fix Regex
let g:VeryMagicSubstitute = 1  " (default is 0)
let g:VeryMagicGlobal = 1  " (default is 0)
let g:VeryMagicVimGrep = 1  " (default is 0)
let g:VeryMagicSearchArg = 1  " (default is 0, :edit +/{pattern}))
let g:VeryMagicFunction = 1  " (default is 0, :fun /{pattern})
let g:VeryMagicHelpgrep = 1  " (default is 0)
let g:VeryMagicRange = 1  " (default is 0, search patterns in command ranges)
let g:VeryMagicEscapeBackslashesInSearchArg = 1  " (default is 0, :edit +/{pattern}))

" TODO use easymotion for search

" xclip
" map "+y :!xclip -f -sel clip<CR>
" map "+p :r!xclip -o -sel clip<CR>

set history=10000

noremap <leader>gs :Gstatus<CR>
noremap <leader>gd :Gdiff<CR>
noremap <leader>gb :Gblame<CR>

" Trailing whitespace {{{
highlight ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+$/
autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
autocmd InsertLeave * match ExtraWhitespace /\s\+$/
autocmd BufWinLeave * call clearmatches()

" Remove trailing whitespace before write
fun! <SID>StripTrailingWhitespaces()
    let l = line(".")
    let c = col(".")
    %s/\s\+$//e
    call cursor(l, c)
endfun

autocmd BufWritePre * :call <SID>StripTrailingWhitespaces()
" }}}

" Keep visual mode selection after indenting
vmap > >gv
vmap < <gv

" Keep visual location after x
vnoremap x xgv<Esc>

function! YRRunAfterMaps()
	" Let Y be from point to end of line
    nnoremap Y :<C-U>YRYankCount 'y$'<CR>
	" Make visual yank maintain cursor position
	vnoremap y :YRYankRange 'v'<CR>gv<Esc>
endfunction
" Only search visually selected text
vnoremap / <Esc>/\%V\v
vnoremap ? <Esc>?\%V\v
set smartcase

" Persistent undo
if has("persistent_undo")
    set undodir=$HOME/.undodir/
    set undofile
endif

nnoremap <leader>u :UndotreeToggle<CR>

let g:yankring_paste_using_g = 0
nnoremap <expr> gp '`[' . strpart(getregtype(), 0, 1) . '`]'

" Don't pair quotes in vim files
let g:autoclose_vim_commentmode = 1

" Jump to last line we were at
au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g`\"" | endif

function! ShowTodos()
	set errorformat+=%f%*[\ ]%l%*[\ ]%m
	cex system('sed "s/(.*)[[:space:]]*//"', system('sed "s/.\{9\}//"', system('grep TODO', system('egrep "Michael\|Not Committed"', system('xargs -n1 git blame -f -n -w', system('git grep -l TODO'))))))
	"setlocal errorformat<
	copen
endfunction
nnoremap <leader>td :call ShowTodos()<CR>

":noremap <silent> - :call EnhancedCommentify('no', 'comment')<CR>j
":noremap <silent> _ :call EnhancedCommentify('no', 'decomment')<CR>j

" Work-around incomplete terminfo databases
" " Particulalry useful when under `screen`, which may or may not be attached to
" " a physical terminal capable of 256color mode.
if match($TERMCAP, 'Co#256:') == 0 || match($TERMCAP, ':Co#256:') > 0
   set t_Co=256
endif

" Python {{{
" ignore line too long errors
let g:pymode_lint_ignore = "E501"
" }}}

" set foldopen=block,hor,insert,jump,mark,percent,quickfix,search,tag,undo

set wildignore+=*.pyc,*/.git/*,*/.hg/*,*/.svn/*

" Search for selected text, forwards or backwards.
vnoremap <silent> * :<C-U>
  \let old_reg=getreg('"')<Bar>let old_regtype=getregtype('"')<CR>
  \gvy/<C-R><C-R>=substitute(
  \escape(@", '/\.*$^~['), '\_s\+', '\\_s\\+', 'g')<CR><CR>
  \gV:call setreg('"', old_reg, old_regtype)<CR>
vnoremap <silent> # :<C-U>
  \let old_reg=getreg('"')<Bar>let old_regtype=getregtype('"')<CR>
  \gvy?<C-R><C-R>=substitute(
  \escape(@", '?\.*$^~['), '\_s\+', '\\_s\\+', 'g')<CR><CR>
  \gV:call setreg('"', old_reg, old_regtype)<CR>

" Match tags in xml
runtime! macros/matchit.vim

" Autowrapping is annoying
set tw=0

" Sytastic {{{
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 1
let g:syntastic_javascript_checkers = ['jshint']
let g:syntastic_python_checkers = ['prospector']
" }}}

" allow the . to execute once for each line of a visual selection
vnoremap . :normal .<CR>
vnoremap @q :normal @q<CR>
vnoremap @w :normal @w<CR>

let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#enabled = 1
set laststatus=2
let g:airline_theme='base16_solarized'

" save folding and cursor on exit
set viewoptions-=options " without this line it saves all old key bindings etc.
autocmd BufWinLeave *.* mkview
autocmd BufWinEnter *.* silent loadview

nnoremap <Leader>o :CtrlPFunky<Cr>
" narrow the list down with a word under cursor
nnoremap <Leader>O :execute 'CtrlPFunky ' . expand('<cword>')<Cr>
let g:ctrlp_funky_matchtype = 'path'
let g:ctrlp_funky_syntax_highlight = 1

let g:ropevim_autoimport_modules = ["os", "shutil", "sys"]

let g:easytags_async = 1

set hlsearch
nmap <Leader>/ :set hlsearch!
set foldlevelstart=99

" {{{ Markdown
let g:markdown_mapping_switch_status = '<Leader>x'
" }}}

au BufRead,BufNewFile *.dp setfiletype ion
autocmd BufRead,BufNewFile *.dp set et sts=0 sw=2 ts=2
autocmd BufRead,BufNewFile *.ion set et sts=0 sw=2 ts=2
" autocmd BufRead,BufNewFile *.ion set noet ci pi sts=0 sw=4 ts=4

if has('gui_running')
  set guifont=SourceCodePro+Powerline+Awesome\ Regular:h11
endif

au BufRead,BufNewFile *.hql setfiletype sql
autocmd BufRead,BufNewFile *.hql set et sts=0 sw=2 ts=2

cnoreabbrev ack Ack

" vmap <silent>sf <Plug>SQLU_Formatter<CR>
" nmap <silent>scl <Plug>SQLU_CreateColumnList<CR>
" nmap <silent>scd <Plug>SQLU_GetColumnDef<CR>
" nmap <silent>scdt <Plug>SQLU_GetColumnDataType<CR>
" nmap <silent>scp <Plug>SQLU_CreateProcedure<CR>
"

"Use 24-bit (true-color) mode in Vim/Neovim when outside tmux.
"If you're using tmux version 2.2 or later, you can remove the outermost $TMUX check and use tmux's 24-bit color support
"(see < http://sunaku.github.io/tmux-24bit-color.html#usage > for more information.)
if (empty($TMUX))
  if (has("nvim"))
    "For Neovim 0.1.3 and 0.1.4 < https://github.com/neovim/neovim/pull/2198 >
    let $NVIM_TUI_ENABLE_TRUE_COLOR=1
  endif
  "For Neovim > 0.1.5 and Vim > patch 7.4.1799 < https://github.com/vim/vim/commit/61be73bb0f965a895bfb064ea3e55476ac175162 >
  "Based on Vim patch 7.4.1770 (`guicolors` option) < https://github.com/vim/vim/commit/8a633e3427b47286869aa4b96f2bfc1fe65b25cd >
  " < https://github.com/neovim/neovim/wiki/Following-HEAD#20160511 >
  if (has("termguicolors"))
    set termguicolors
  endif
endif
