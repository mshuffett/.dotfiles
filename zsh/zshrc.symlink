# disable Ctrl+S control flow
stty stop undef
# export TERM="xterm-256color"

####################### BEGIN oh-my-zsh code #####################

# Path to your oh-my-zsh configuration.
ZSH=$HOME/.oh-my-zsh

# Set name of the theme to load.
# Look in ~/.oh-my-zsh/themes/
# Optionally, if you set this to "random", it'll load a random theme each
# time that oh-my-zsh is loaded.
#ZSH_THEME="my-agnoster"

# Uncomment following line if you want to disable command autocorrection
# DISABLE_CORRECTION="true"

# Uncomment following line if you want red dots to be displayed while waiting for completion
COMPLETION_WAITING_DOTS="true"

# Uncomment following line if you want to disable marking untracked files under
# VCS as dirty. This makes repository status check for large repositories much,
# much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

DISABLE_AUTO_UPDATE=true

####################### END oh-my-zsh code #####################
# Custom code

#bindkey -e
export DEFAULT_USER=shufm002

# Ctrl-u: Deletes everything before cursor (u is on left)
#bindkey '^u' backward-kill-line
# Ctrl-o: Deletes everything after cursor (o is on right)
    # (Commonly Ctrl-k)
#bindkey '^o' kill-line

setopt extended_glob

# setopt nohistverify
# Report statistics on commands that take longer than 10 seconds
REPORTTIME=10

## Go up 5 directories with u 5
u () {
    set -A ud
    ud[1+${1-1}]=
    cd ${(j:../:)ud}
}

if [[ -z "$TERMCAP" ]] && [[ "$TERM" == "screen" ]]; then
  export TERMCAP='Co#256:'
fi

# bindkey "^[^[OC" forward-word
# bindkey "^[^[OD" backward-word

####################### BEGIN holman's code #####################

# shortcut to this dotfiles path is $ZSH
export ZSH=$HOME/.dotfiles

# Path manipulation
typeset -U path # force path array to have unique values
path=($HOME/bin /usr/local/Cellar/python/2.7.12/bin /usr/local/Cellar/python/2.7.12/Frameworks/Python.framework/Versions/Current/bin /usr/local/opt/coreutils/libexec/gnubin /usr/local/bin ~/lighttable-0.8.0-alpha-linux ./bin $HOME/.rbenv/shims /usr/local/bin /usr/local/sbin $HOME/.sfs $ZSH/bin "$path[@]")

typeset -U manpath # force path array to have unique values
manpath=(/usr/local/opt/coreutils/libexec/gnuman /usr/local/man /usr/local/mysql/man /usr/local/git/man "$manpath[@]")

# use .localrc for SUPER SECRET CRAP that you don't
# want in your public, versioned repo.
if [[ -a ~/.localrc ]]
then
  source ~/.localrc
fi

# all of our zsh files
typeset -U config_files
config_files=($ZSH/**/*.zsh)

# load the path files
for file in ${(M)config_files:#*/path.zsh}
do
  source $file
done

# load everything but the path and completion files
for file in ${${config_files:#*/path.zsh}:#*/completion.zsh}
do
  source $file
done

# initialize autocomplete here, otherwise functions won't be loaded
# autoload -U compinit
# compinit

# load every completion after autocomplete loads
for file in ${(M)config_files:#*/completion.zsh}
do
  source $file
done

unset config_files

export LESS='-iR'

# eval "$(fasd --init auto)"

export ZPLUG_HOME=/usr/local/opt/zplug
source $ZPLUG_HOME/init.zsh

zplug 'zplug/zplug', hook-build:'zplug --self-manage'

zplug "joel-porquet/zsh-dircolors-solarized"
zplug "plugins/git", from:oh-my-zsh
zplug "plugins/git-extras", from:oh-my-zsh
zplug "plugins/docker", from:oh-my-zsh
zplug "plugins/pip", from:oh-my-zsh
zplug "zsh-users/zsh-syntax-highlighting"

POWERLEVEL9K_MODE='awesome-patched'
POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS=(status time)

# if we're on a mac disable git segment since it seems very slow
if [[ "$(uname -s)" == "Darwin" ]]
then
  POWERLEVEL9K_LEFT_PROMPT_ELEMENTS=(context dir vcs virtualenv)
fi
zplug "bhilburn/powerlevel9k", as:theme
zplug "plugins/fasd", from:oh-my-zsh
zplug "Tarrasch/zsh-autoenv"

# Install plugins if there are plugins that have not been installed
if ! zplug check --verbose; then
    printf "Install? [y/N]: "
    if read -q; then
        echo; zplug install
    fi
fi

zplug load

# {{{ allow c-r to be executed in middle of line
# taken from http://chneukirchen.org/blog/archive/2013/03/10-fresh-zsh-tricks-you-may-not-know.html
autoload -Uz narrow-to-region
function _history-incremental-preserving-pattern-search-backward
{
  local state
  MARK=CURSOR  # magick, else multiple ^R don't work
  narrow-to-region -p "$LBUFFER${BUFFER:+>>}" -P "${BUFFER:+<<}$RBUFFER" -S state
  zle end-of-history
  zle history-incremental-pattern-search-backward
  narrow-to-region -R state
}
zle -N _history-incremental-preserving-pattern-search-backward
bindkey "^R" _history-incremental-preserving-pattern-search-backward
bindkey -M isearch "^R" history-incremental-pattern-search-backward
bindkey "^S" history-incremental-pattern-search-forward
# }}}

setopt autocd
export PATH=$PATH:/usr/local/bin  # MIDWAY PATH: Path changed for ssh

typeset -u PYTHONPATH
PYTHONPATH=(/usr/local/lib/python2.7/site-packages)

test -e "${HOME}/.iterm2_shell_integration.zsh" && source "${HOME}/.iterm2_shell_integration.zsh"

JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_102.jdk/Contents/Home
HADOOP_VERSION=2.7.3
HADOOP_HOME=/usr/local/Cellar/hadoop/2.7.3
HADOOP_CONF_DIR=/usr/local/Cellar/hadoop/2.7.3/libexec/etc/hadoop

EDITOR=macvim

source ~/.iterm2_shell_integration.`basename $SHELL`
eval $(env _PIPENV_COMPLETE=source-zsh pipenv)
